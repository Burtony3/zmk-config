/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E             &kp R             &kp T          &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D             &kp F             &kp G          &kp H      &kp J  &kp K      &kp L    &kp SQT   &kp ENTER
&kp LSHFT   &kp Z  &kp X  &kp C             &kp V             &kp B          &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &none
                          &kp LEFT_CONTROL  &kp LEFT_COMMAND  &lt 2 SPACE    &kp SPACE  &mo 1  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC    &trans  &kp HOME      &kp UP            &kp END           &kp PAGE_UP      &trans        &kp N7        &kp N8         &kp N9        &trans  &kp BSPC
&kp TAB    &trans  &kp LEFT      &kp DOWN          &kp RIGHT         &kp PAGE_DOWN    &trans        &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6  &trans  &trans
&kp LSHFT  &trans  &kp LC(LEFT)  &kp LC(UP_ARROW)  &kp LC(RIGHT)     &trans           &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &trans  &trans
                                 &kp LEFT_CONTROL  &kp LEFT_COMMAND  &trans           &trans        &trans        &kp RIGHT_ALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH          &kp DLLR          &kp PRCNT    &kp MINUS  &kp AMPS              &kp ASTRK              &kp LPAR   &kp RPAR       &kp BSPC
&kp TAB    &trans    &trans  &trans            &trans            &trans       &kp PLUS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS   &kp SEMICOLON  &trans
&kp LSHFT  &trans    &trans  &trans            &trans            &trans       &kp EQUAL  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH  &kp BACKSLASH  &trans
                             &kp LEFT_CONTROL  &kp LEFT_COMMAND  &trans       &trans     &trans                &kp RIGHT_ALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans      &trans        &trans           &rgb_ug RGB_BRI  &trans    &kp C_VOLUME_UP    &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &bl BL_TOG  &bl BL_CYCLE  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans    &kp C_VOLUME_DOWN  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans      &trans        &trans           &rgb_ug RGB_BRD  &trans    &kp K_MUTE         &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                  &trans           &trans           &trans    &trans             &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        utility-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
